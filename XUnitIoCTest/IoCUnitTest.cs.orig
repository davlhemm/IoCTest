using System;
using Xunit;
using IoCTest;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using IoCTest.Model;
using IoCTest.Interfaces;

namespace XUnitIoCTest
{
    public class IoCUnitTest
    {
        [Fact]
        public void Test1()
        {
            IBase aBase = new Derived();
            DerivedModel aModel = new DerivedModel(aBase);
            string modelString = aModel.Do("TEST");

            Derived thing1 = new Derived();
            List<Type> nest1Types = thing1.GetType().GetNestedTypes().ToList();
            FurtherDerived thing2 = new FurtherDerived();
            List<Type> nest2Types = thing2.GetType().GetNestedTypes().ToList();
            string theString = thing1.BaseDo("Test1 test");
        }

        [Fact]
        public void LoggerDependencyTest()
        {
<<<<<<< Updated upstream
            ILogger log = new FileLogger("LogFile.txt");
            log.Log("First line");
            log.Log("Second line");

            ILogger logTwo = new FileLogger("AnotherLog.txt");
            logTwo.Log("Line");
=======
            //Logger log = new Logger(new StreamWriter(new FileStream());

            string logFileName = "LogFile.txt";
            Environment.SpecialFolder baseFolder = Environment.SpecialFolder.Desktop;

            Logger log = new FileLogger(logFileName, baseFolder);
            log.Log("LOG DATA");
>>>>>>> Stashed changes
        }

        public class FileLogger : Logger
        {
            private readonly string _logFile;

            protected FileLogger()
            {
                throw new NotImplementedException("Can't create logger here...");
            }

            /// <summary>
            /// My documents default location for file.
            /// </summary>
            /// <param name="logFile"></param>
            public FileLogger(string logFile)
                : base(new StreamWriter
                (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop),
                    logFile)))
            {
                _logFile = logFile;
            }

            public FileLogger(string logFile, Environment.SpecialFolder specialFolder)
                : base(new StreamWriter
                (Path.Combine(Environment.GetFolderPath(specialFolder),
                    logFile)))
            {
                _logFile = logFile;
            }

            public FileLogger(string logFile, TextWriter writer)
                : base(writer)
            {
                _logFile = logFile;
            }
        }

        public class StratTester
        {
            [Fact]
            public void StratTest()
            {
                StratContext aStrat = new StratContext(new ConcreteStrategyA());
                StratContext bStrat = new StratContext(new ConcreteStrategyB());

                aStrat.DoStrat();
                bStrat.DoStrat();
            }
        }


        public class DynamicTester
        {
            [Fact]
            public void DynamicTest()
            {
                DelegateInvoker<int> invoker = new DelegateInvoker<int>();
                invoker.BuildDynamic();
            }

            [Fact]
            public void DynDictTest()
            {
                Dictionary<string, object> testDict = new Dictionary<string, object>();
                testDict.Add("1", 1);
                object test;
                testDict.TryGetValue("1", out test);
            }
        }
    }
}
